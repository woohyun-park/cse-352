(defun my-assert (a b)
    (if (equal a b)
        (print 'Correct!)
        (print 'Incorrect)))

(defun fib (n)
    (cond ((eql n 0) 0)
        ((eql n 1) 1)
        (t (+ (fib (- n 1)) (fib (- n 2))))))

(print '(Test fib))
(my-assert (fib 0) 0)
(my-assert (fib 1) 1)
(my-assert (fib 2) 1)
(my-assert (fib 3) 2)
(my-assert (fib 4) 3)
(my-assert (fib 5) 5)
(my-assert (fib 6) 8)
(terpri)

(defun my-reverse (i)
    (cond ((eql i nil)())
        ((equal i (car i))(list i))
        (t (append (my-reverse (cdr i)) (list (car i))))))

(print '(test my-reverse))
(my-assert (my-reverse '(a b c)) '(c b a))
(my-assert (my-reverse '(a)) '(a))
(my-assert (my-reverse '(((a) b) c)) '(c ((a) b)))
(terpri)

(defun sum (n)
    (if (eql n 0)
        0
        (+ n (sum (- n 1)))))

(print '(test sum))
(my-assert (sum 0) 0)
(my-assert (sum 3) 6)
(terpri)

(defun last-item (n)
    (if (eql (cdr n) nil)
        (car n)
        (last-item (cdr n))))

(print '(test last-item))
(my-assert (last-item '(1 2 3 4)) 4)
(my-assert (last-item '(a b (c d))) '(c d))
(my-assert (last-item '(a)) 'a)
(my-assert (last-item '((a))) '(a))
(terpri)

(defun remove-lst (word lst)
    (cond ((eql (car lst) nil) nil)
        ((equal word (car lst)) (cdr lst))
        (t (append (list (car lst)) (remove-lst word (cdr lst))))))

(print '(test remove-lst))
(my-assert (remove-lst 'a '(b a n a n a)) '(b n a n a))
(my-assert (remove-lst 'a '(b (a n) a n a)) '(b (a n) n a))
(my-assert (remove-lst '(1 2) '(1 2 (1 2) 3)) '(1 2 3))
(my-assert (remove-lst 'cat '(dog fox hen)) '(dog fox hen))
(terpri)

(defun remove-2nd-helper (word lst count)
    (cond ((eql (car lst) nil) nil)
        ((and (equal word (car lst))
             (eql count 1))
         (cdr lst))
        ((equal word (car lst))
         (append (list (car lst)) (remove-2nd-helper word (cdr lst) 1)))
        (t (append (list (car lst)) (remove-2nd-helper word (cdr lst) count)))))

(defun remove-2nd (word lst)
    (remove-2nd-helper word lst 0))

(print '(test remove-2nd))
(my-assert (remove-2nd 'a '(b a n a n a)) '(b a n n a))
(my-assert (remove-2nd 'a '(b (a n) a n a)) '(b (a n) a n))
(my-assert (remove-2nd '(1 2) '(1 2 (1 2) 3)) '(1 2 (1 2) 3))
(terpri)

(defun remove-last (word lst)
    (my-reverse (remove-lst word (my-reverse lst))))

(print '(test remove-last))
(my-assert (remove-last 'a '(b a n a n a s)) '(b a n a n s))
(my-assert (remove-last 'a '(b (a n) a n a)) '(b (a n) a n))
(my-assert (remove-last '(1 2) '(1 2 (1 2) 3)) '(1 2 3))
(terpri)

(defun remove-all1 (word lst)
    (cond ((eql (car lst) nil) nil)
        ((equal word (car lst)) (remove-all1 word (cdr lst)))
        (t (append (list (car lst)) (remove-all1 word (cdr lst))))))

(print '(test remove-all1))
(my-assert (remove-all1 'a '(b a n a n a s)) '(b n n s))
(my-assert (remove-all1 'a '(b (a n) a n a)) '(b (a n) n))
(my-assert (remove-all1 '(1 2) '(1 2 (1 2) 3)) '(1 2 3))
(terpri)

(defun subst-1st (a b lst)
    (cond ((eql (car lst) nil) nil)
        ((equal b (car lst)) (append (list a) (cdr lst)))
        (t (append (list (car lst)) (subst-1st a b (cdr lst))))))

(print '(test subst-1st))
(my-assert (subst-1st 'dog 'cat '(my cat is cute)) '(my dog is cute))
(my-assert (subst-1st 'b 'a '(c a b a c)) '(c b b a c))
(my-assert (subst-1st '(0) '(*) '((*)(*)(0))) '((0)(*)(0)))
(terpri)

(defun subst-all (a b lst)
    (cond ((eql (car lst) nil) nil)
        ((equal b (car lst)) (append (list a) (subst-all a b (cdr lst))))
        (t (append (list (car lst)) (subst-all a b (cdr lst))))))

(print '(test subst-all))
(my-assert (subst-all 'dog 'cat '(my cat is cute)) '(my dog is cute))
(my-assert (subst-all 'b 'a '(c a b a c)) '(c b b b c))
(terpri)

(defun reflect-atom (a table)
    (cond ((eql (car table) nil) a)
        ((equal a (caar table)) (cadar table))
        (t (reflect-atom a (cdr table)))))

(defun reflect (slst lst)
    (cond ((eql (car lst) nil) nil)
        (t (cons (reflect-atom (car lst) slst) (reflect slst (cdr lst))))))

(print '(test reflect))
(my-assert (reflect '((I U)(U me)) '(I love U)) '(U love me))
(my-assert (reflect '((ugly beautiful)(is was)(fool genius)) '(Tom thinks he is a fool))
           '(Tom thinks he was a genius))
(my-assert (reflect '((ugly beautiful)(is was)(fool genius)) '(Mary thinks she is ugly))
           '(Mary thinks she was beautiful))
(terpri)

(defun echo (table lst)
    (append (append '(you mean) (reflect table lst)) '(?)))

(print '(test echo))
(my-assert (echo '((i u)(you me)) '(i love you)) '(You mean u love me ?))
(my-assert (echo '((i u)(you me)) '(i think i hate you)) '(you mean u think u hate me ?))